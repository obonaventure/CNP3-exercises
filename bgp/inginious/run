#!/bin/python3

import subprocess
from ast import literal_eval
from inginious import feedback, rst, input
from inginious.bgp import bgp_utils as bgp

grade = 0
nprob = 3
inc = 100/nprob
        
as1 = bgp.AS(1)
as2 = bgp.AS(2)
as3 = bgp.AS(3)
as4 = bgp.AS(4)
as5 = bgp.AS(5)

def get_single_line_answer(question_id):
    answer = input.get_input(question_id)
    if answer.upper() == "NONE":
        return answer.upper()
    answer = ''.join(answer.split()) # remove spaces
    answer = answer.upper()  # to upper case
    return answer.split(",")

def get_multiple_line_answer(question_id):
    answer = input.get_input(question_id)
    if answer.upper() == "NONE":
        return answer.upper()
    answer = ''.join(answer.split()) # remove spaces
    answer = answer.upper()  # to upper case
    return [a.split(",") for a in answer.split("\n")]

def set_problem_result(problem, result, fb):
    global grade
    feedback.set_problem_result(result, problem)
    feedback.set_problem_feedback(fb, problem)
    if result == "success":
        grade += inc

ribs = bgp.get_ribs("bgp.py")
q1 = get_single_line_answer("q1")
if bgp.compare_known_prefixes(q1, ribs[as5.asn]):
    set_problem_result("q1", "success", "Correct")
else:
    set_problem_result("q1", "failed", "Your answer is not correct")
    
q2 = get_single_line_answer("q2")
if bgp.compare_best_route(q2, ribs[as5.asn], as4.prefix):
    set_problem_result("q2", "success", "Correct")
else:
    set_problem_result("q2", "failed", "Your answer is not correct") 
    
q3 = get_multiple_line_answer("q3")
if bgp.compare_all_routes(q3, ribs[as5.asn], as4.prefix):
    set_problem_result("q3", "success", "Correct")
else:
    set_problem_result("q3", "failed", "Your answer is not correct") 
                   
feedback.set_grade(grade) 
if grade >= 50:
    feedback.set_global_result("success")
else:
    feedback.set_global_result("failed")